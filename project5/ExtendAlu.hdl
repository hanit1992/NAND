/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1],
      no=instruction[0], out = outALU, zr = ALUzr, ng = ALUng);
     And(a=instruction[7], b=instruction[8], out=isTheOutputRegular);

     //getting optional output by 7
     Mul(a=x, b=y, out=xMulty);
     Mux16(a=xMulty, b=outALU, sel=instruction[7], out=optionalOutOutput1);

     //getting optional output by 8
     Mux16(a=y, b=x, sel=instruction[4], out=inputToShift);
     ShiftRight(in=inputToShift, out=rightShift);
     ShiftLeft(in=inputToShift, out=shiftLeft);
     Mux16(a=rightShift, b=shiftLeft, sel=instruction[5], out=shiftOutput);

     Mux16(a=xMulty, b=shiftOutput, sel=instruction[7],out=temp1);
     Mux16(a=temp1, b=outALU, sel=isTheOutputRegular,out=tempOut, out[15]=sign, out=out);

     //handeling zr and ng
     Or16Way(in=tempOut, out=isTheOut0); // doing or on all the bits to see if it's 0
     Mux(a=true, b=false, sel=isTheOut0, out=thezr, out=zr);
     Mux(a=false, b=true, sel=sign, out=ng); //checking negativity or positivity of output

}
